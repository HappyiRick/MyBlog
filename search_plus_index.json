{"./":{"url":"./","title":"前言","keywords":"","body":"前言 This is a gitbook-based blog for iRick SUMMARY 技术 终端开发 iOS iOS代码规范探索实践 Android Web 小程序 日有寸进 Gitbook配置，开启写作之路 (上) Gitbook配置，开启写作之路 (下) Github+PicGo+jsDelivr创建稳定图床 生活 读书笔记 《原则》 抛砖引玉 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/":{"url":"Terminal/","title":"终端开发","keywords":"","body":"终端开发 include iOS / Android / Web / 小程序 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/iOS/":{"url":"Terminal/iOS/","title":"iOS","keywords":"","body":"iOS iOS纪要 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/iOS/iOSCodeGuidePractice.html":{"url":"Terminal/iOS/iOSCodeGuidePractice.html","title":"iOS代码规范探索实践","keywords":"","body":"Clang-format结合Xcode File-template、Code Snippet探索iOS代码规范实践 代码规范是每一个开发小组在实践中的一个痛点，如何让队伍中尽可能多的人遵循同一套代码风格，产出高质量的代码，同时能够尊重每位开发者的编程习惯，不增加冗余环节，是值得每个工程师思考的问题 在本文中，将利用Clang-format工具结合Xcode自带文件模版、Code Snippet探索iOS代码规范实践 Clang-format 安装clang-format 添加clang-format服务 clang-format使用 添加clang-format快捷键 Xcode File-template Code Snippet Clang-format ClangFormat describes a set of tools that are built on top of LibFormat. It can support your workflow in a variety of ways including a standalone tool and editor integrations. Clang-format 是一个代码格式化工具，能够为C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C#提供格式化规则 安装clang-format 通过homebrew下载 brew install clang-format 查看是否安装成功 clang-format --version 添加clang-format服务 在 启动台 >> 其他 >> 自动操作 中选择 快速操作 脚本代码 export PATH=/usr/local/bin:$PATH clang-format 保存服务并命名，例如保存为 Xcode-clang-format （很重要,后面还要用） clang-format使用 在当前用户根目录～ 放入 .clang-format 文件 touch ~/.clang-format 下载链接 .clang-format 具体参数意义详见 clang-format参数详解 添加clang-format快捷键 系统设置 >> 键盘 >> 快捷键 >> APP快捷键 >> Xcode.app 添加服务 Xcode-clang-format （之前保存的服务名）设置快捷键 Control + I 快去工程里试试吧 参考资料 clang-format clang-format官方自定义参数介绍 Xcode File-template Xcode的文件模板路径一般在下面这个目录 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates 所有的模板文件即存在File Template/iOS/Source中 复制 source 文件夹，重命名为 CustomTemplate ，即为自定义的文件模板分区 其中，又分为 Swift 和 OC 以及带XIB文件的文件夹，其中的 .h 和 .m 文件即为模板文件 以 OC 的 ViewController 为例 新建 CustomTemplate 下的 ViewController 文件 建立好的.m文件 通过模板，即可实现代码分区和一部分固定方法的重写实现 参考资料 Apple宏参数文档 Xcode模板和Code Snippet Code Snippet 新建 Code Snippet 通知、Observer、懒加载、创建单例、贝塞尔曲线等格式化代码，均可通过上述方式存储起来 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/Android/":{"url":"Terminal/Android/","title":"Android","keywords":"","body":"Android Android 纪要 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/Web/":{"url":"Terminal/Web/","title":"Web","keywords":"","body":"Web 前端学习笔记 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"Terminal/小程序/":{"url":"Terminal/小程序/","title":"小程序","keywords":"","body":"小程序 小程序纪要 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"LittleUP/":{"url":"LittleUP/","title":"日有寸进","keywords":"","body":"日有寸进 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"LittleUP/gitbookConfig.html":{"url":"LittleUP/gitbookConfig.html","title":"Gitbook配置，开启写作之路 (上)","keywords":"","body":"Gitbook配置--开启写作之路 (上) 在本文中，将使用Gitbook + Github pages搭建属于自己的Blog，终端环境为zsh，设备为Macbook. 1.node.js 安装 2.Gitbook安装 warning 3.Gitbook部署 初始化 warning 构建 部署 4.Gitbook插件 book.json 总结 1.node.js 安装 gitbook作为一个前端写作框架，需要nodejs提供页面渲染支持，以及npm包管理工具来提供自定义插件进行使用。 由于gitbook作者目前已经转向gitbook的商业化运作，因此gitbook目前公开的部署版本已经是几年前了，所以高版本的node部署起来会有一定的问题，建议如果不需要使用nodejs新特性的朋友，可以安装6.x版本node.js 6.x . 当然，如果需要跟随新特性的话，可以使用homebrew来进行安装，不过会存在一部分问题，我们可以一起来解决一下, 同时，有一部分插件随着nodejs版本的升高也无法使用，因此本文中homebrew选用的nodejs版本为node@12. brew search node brew install node@12 下载完成之后，按照提示执行下列命令, 并使之生效即可. echo 'export PATH=\"/usr/local/opt/node@16/bin:$PATH\"' >> ~/.zshrc 查看node版本，成功安装即可进行下一步. node -v 2.Gitbook安装 nodejs环境配置完成之后，即可通过npm工具下载安装gitbook npm install gitbook-cli -g 安装完成之后，查看gitbook版本，即会安装gitbook工具 gitbook -V warning 此时，可能会出现如下错误，主要是由于node版本较高导致的 有两种解决方案 打开finder，通过路径找到polyfills.js文件，其中，可以看到287行代码处于statFix 方法中，其调用位置在62-64行，注释中阐述该方法主要是旧版本的修复逻辑，因此可以直接将调用位置注释掉，即可解决该问题. 通过降低nodejs版本，建议降至7.x以下，该方法也是网络上的主流方法，但是个人感觉有点削足适履. 3.Gitbook部署 初始化 gitbook安装完成后，即可通过gitbook命令初始化gitbook目录 gitbook init 其中README为项目文档，SUMMARY.md为目录文档，在SUMMARY中更新目录完成后，即可直接通过init命令创建该目录中的文件 # Summary * [Introduction](README.md) * [前言](readme.md) * [第一章](part1/README.md) * [第一节](part1/1.md) * [第二节](part1/2.md) * [第三节](part1/3.md) * [第四节](part1/4.md) * [第二章](part2/README.md) * [第三章](part3/README.md) * [第四章](part4/README.md) 上述目录创建完成后执行命令 warning 在gitbook初始化过程过程中，还会出现一个问题，该问题是由于nodejs版本过高导致的，发现了吗，其实由于gitbook公开版本久未更新的缘故，还是使用老版本的配套环境更加方便。 构建 初始化之后，可以通过以下命令来进行构建，构建完成后会生成_book目录，其中存储的即为默认生成的静态网页 gitbook build 部署 构建完成后，通过以下命令，即可启动gitbook服务 gitbook serve 通过 http://localhost:4000 即可访问新建的gitbook电子书 4.Gitbook插件 book.json 一般项目配置中都会有一个核心的配置文件，gitbook项目中即有一个book.json来管理整个gitbook项目，以下是我博客项目的配置文件 { \"author\": \"irick\", \"description\": \"A GitBook Blog for irick\", \"extension\": null, \"generator\": \"site\", \"language\":\"zh-hans\", \"isbn\": \"\", \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": { \"About me\":\"https://github.com/HappyiRick\", \"irick's Blog\": \"https://happyirick.github.io/\" } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [ \"-sharing\", \"-lunr\", \"-search\", \"-fontsettings\", \"multipart\", \"simple-page-toc\", \"page-toc-button\", \"github\", \"advanced-emoji\", \"search-pro\", \"code\", \"copy-code-button\", \"chapter-fold\", \"splitter\", \"expandable-chapters\", \"back-to-top-button\", \"lightbox\", \"toggle-chapters\", \"anchors\", \"baidu-tongji\", \"tbfed-pagefooter\", \"insert-logo\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 }, \"github\": { \"url\": \"https://github.com/HappyiRick\" }, \"code\": { \"copyButtons\": true }, \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy happyirick 2022\", \"modify_label\": \"Post time:\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"baidu-tongji\": { \"token\": \"5370d7bf584be5cfd91dd00fcb82ba67\" }, \"insert-logo\":{ \"url\":\"https://avatars.githubusercontent.com/u/16249555?s=400&u=45da22298bf8c55f726807d1ba94740343d14f20&v=4\", \"style\":\"background:none;min-height:196px;max-height:196px\" } }, \"title\": \"irick's Blog\", \"variables\": {} } 其中plugins 部分，则表示我们本项目的插件引用情况，追加插件名即可添加插件，通过在插件名前增加 - 号则可删去该插件，通过以下命令来进行安装 gitbook install 总结 gitbook是一款很方便的电子书生成浏览工具， 搭配一款合适的markdown写作工具即可实现高效的写作，非常感谢作者提供的这款工具 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"LittleUP/gitbookConfig_2.html":{"url":"LittleUP/gitbookConfig_2.html","title":"Gitbook配置，开启写作之路 (下)","keywords":"","body":"Gitbook配置，开启写作之路 (下) 在本文中，将使用Gitbook + Github pages搭建属于自己的Blog，终端环境为zsh，设备为Macbook. 上一篇中，我们讲了Gitbook的安装、构建及启动服务，这样只是完成了gitbook的本地化工作，如果我们想让更多人看到我们的电子书，就需要将其部署在公共服务器上了。对于个人博客来说，还有一条更方便的路径，便是利用Github提供的pages功能及公开仓库来完成网络电子书的部署。 1.Github pages搭建 1.1 建立github pages仓库 1.2 设置主页 2.建立Gitbook博客仓库 3.通过Github Actions实现自动部署 3.1 新建token 3.2 新建Actions脚本 总结 参考链接 1.Github pages搭建 1.1 建立github pages仓库 仓库名称必须为 .github.io 1.2 设置主页 进入.github.io仓库，点击Settings > Pages >> Theme chooser 然后就可以选择一个jeklly提供的模板主题，同时，github会默认建立名为gh-pages 的部署分支，其即为我们个人主页静态资源的部署分支. 当然，也可以选择fork其他自定义主题的仓库. 稍等两分钟之后，访问https://.github.io 即可访问你的个人github主页. 2.建立Gitbook博客仓库 这部分无需赘言，即在github上建立一个存放gitbook内容的公共仓库，然后在本地gitbook目录中绑定该仓库，新建gh-pages分支用作静态资源部署分支，实现gitbook的版本管理和网络部署，其主要流程如下 新建github仓库 进入本地gitbook目录下, 并执行以下命令 git init git remote add origin xxx.git git checkout -b gh-pages # 新建本地分支 git push --set-upstream origin gh-pages # 绑定远端分支，若没有则新建 在该仓库github中进入Setting > Pages >Source , 选择gh-pages作为部署分支 3.通过Github Actions实现自动部署 Actions是Github提供的一款CI工具，可以很便利地在我们提交代码后进行一些脚本操作，对于gitbook来说，我们在写完文档之后，还需要进行生成目录、构建、将生成的静态网页提交到部署分支上，这些工作都可以通过脚本来自动化完成。以前主流方法是通过Travis来做，随着Actions的发布，基于github pages的博客自动部署都可以更加便利地使用它来完成。 3.1 新建token 首先从 Setting > Developer Settings>Personal access tokens 生成用于仓库访问的token，仅选择repo读的权限即可 （记得保存，仅会出现一次） 3.2 新建Actions脚本 首先进入gitbook部署仓库Settings > Security > Actions 新建secret，命名为TOKEN, 值为第二步中的personal access token生成的字符串 进入Actions, 新建脚本 部署脚本代码如下 name: auto-generate-gitbook on: #在master分支上进行push时触发 push: branches: - master jobs: main-to-gh-pages: runs-on: ubuntu-latest steps: - name: checkout master uses: actions/checkout@v2 with: ref: master - name: install nodejs uses: actions/setup-node@v1 - name: configue gitbook run: | npm install -g gitbook-cli gitbook install - name: generate _book folder run: | gitbook build - name: push _book to branch gh-pages env: TOKEN: $ REF: github.com/$ MYEMAIL: xxx@xx.com # ！！记得修改为自己github设置的邮箱 MYNAME: $ run: | cd _book git config --global user.email \"${MYEMAIL}\" git config --global user.name \"${MYNAME}\" git init git remote add origin https://${REF} git add . git commit -m \"Updated By Github Actions With Build $ of $ For Github Pages ${REF}\" git branch -M master git push --force --quiet \"https://${TOKEN}@${REF}\" master:gh-pages 这样每次push之后，Actions上便会自动执行该脚本，失败则会给所填写的邮箱发送邮件提醒，整体来说还是非常高效的 总结 通过两篇文章阐述了利用Gitbook+Github pages搭建博客的过程，做一下记录，也希望能够帮到有需要的人 有些事情还是要试一试才知道，其实并没有那么难，只是我们一直在被自己对于未知的恐惧所支配 参考链接 github actions 简易入门及自动部署博客实践 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"LittleUP/picturebedConfig.html":{"url":"LittleUP/picturebedConfig.html","title":"Github+PicGo+jsDelivr创建稳定图床","keywords":"","body":"Github+PicGo+jsDelivr创建稳定图床 图床是用来存储图片资源用于blog或者其他应用的网络资源库，对于个人blog来说，稳定长期且经济适用的图床非常重要 主要涉及三个服务 Github为我们提供稳定的站点 PicGo用来作为图床配置，管理图床图片 jsDelivr是开源的CDN服务，用来加速图片访问 1.Github配置 1.1 申请图床仓库 1.2 申请Personal Token 2.PicGo安装 3.PicGo配置 我的配置 打开时间戳设置 从相册中获取图片链接 总结 1.Github配置 1.1 申请图床仓库 1.2 申请Personal Token 到 Setting--Developer settings--Personal access tokens申请新的token，申请完之后记得保存 2.PicGo安装 PicGo release 传送门 前往PicGo的Github地址下载并安装PicGo 3.PicGo配置 JSDELIVR 我的配置 其中，指定存储路径之后需要带/以创建路径 打开时间戳设置 在图床上传时，可能会出现重名情况，因此打开时间戳重命名的话，能有效避免这一问题 从相册中获取图片链接 总结 以上，即为构建blog稳定图床的全过程. Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"READNote/":{"url":"READNote/","title":"读书笔记","keywords":"","body":"读书笔记 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"READNote/Principles.html":{"url":"READNote/Principles.html","title":"《原则》","keywords":"","body":"《原则》 生活原则 工作原则 总结 很难将原则定义为一般的案例教学书，不仅因为它的作者是大名鼎鼎的桥水基金创始人，同时也因为其中的很多建设性意见和建议实在是非常地接地气，例如要极度求真、要保持心态极度开放，这都是对生活和工作体验到更高层次后发出的由衷的感慨，未能早点读完这本书，真的是稍微有点遗憾。 书里一共讲到三个部分，首先讲了作者自己的一些历史，然后重点谈到了生活和工作中的原则，着实让人受益匪浅。 本文重点谈一谈个人对生活和工作原则的理解。 生活原则 在生活原则中，作者主要讲到了人的处事原则，做事的方法，心态，观点，以及提高效率，个人认为，这也是我们应该遵循的处理生活问题的几个关键流程。 首先强调了要直面现实中的问题，当问题来临的时候，我们不能采取躲避或者拖延的方式来幻想解决它，而是要从实际出发，做好观察，分析主客观条件，整理资源，对自己所处的环境做出清晰的判断。 然后在认清客观条件的基础上，我们要掌握具体地做事方法，长期的事情长期做，规划好迭代的周期，短期的事情分阶段做，确定好交付的结点，坚决执行，在实践中不断推进客观事物的发展。 同时，在做事过程中，我们会时刻面临意料之外的情况，这就要求我们要掌握应对突发情况的能力，最坏的情况是，我们在观察过程中有所缺漏，导致我们对于客观条件的掌握并不充分和正确，这意味着我们执行工作必然有所缺陷，是否有勇气去承认和分析这种困境，需要我们的头脑极度开放，能够去承认和接受任何可能的极端情况。 其次，在生活的各个场景中，我们不免要与形形色色的人打交道，承认人们之间的差异，在我们做事的过程中异常重要。 最后，无论在哪个场景下，我们时时刻刻都要面临大量的决策，如何筛选出建设性的决策场景并将我们的主要精力放在这些关键决策上，是非常重要的。 工作原则 在工作原则中，主要就是三个要素，环境、人、系统，其中，环境将决定人们做事的外因，而人永远是做事的第一要素，系统则能让两者可持续的交互，不断地去修正环境和发现所需要的人才。 环境作为土壤，决定着其上能生长出何种质量的果实，好的环境能够孕育出丰盈饱满的珍馐，而坏的土壤往往让好的种子也只能生长成为营养匮乏、羸弱无味的残次品。在书中，推崇公司推行极度求真和极度透明的公司文化，去让每一个人都能以一种非常职业的态度去畅谈自己发现的问题，而建立这样一种文化环境之后，后续的具体做法则包括做有意义的实践、求同存异、允许犯错但不能罔顾教训、尊重客观、超越分歧等等。 人永远是是执行的最重要的要素，书中对人这一要素的重视甚至超越了事情本身，这一点我是非常赞同的，许是成长环境多变，接触的形形色色的人非常多，学历专业工作爱好各不相同，然而总有那么一个群体中的人，他们不在于自身的标签是什么，当与他们合作的时候，你总是能够放心地将后背交给他们，用口语来形容就是靠谱，根据书中所强调的，在人这一要素上，我们所应奉行的宗旨就是：找能力过关的靠谱的人，培养他们，并给他们提供做事的平台。 最后则是要建立我们的系统，运动是绝对的，任何环境和人都会在发展的过程中产生变化，从而偏离既定的轨道，这种变化往往被称为熵增，指代事物的混乱程度，一旦熵到达了某种量级，则会推动原有的系统产生颠覆性的变化，依我之见，所有的管理工作，都是引导这种熵增和变化去走向正确的轨道，从而推动事情向我们预期的方向平稳发展。书中为我们提供了一系列的具体措施，包括不容忍发现的问题、探究问题的根源、合理地解决问题、制定计划并保证按照计划执行、形成指导原则和操作手册、在思想上重视管理工作。 总结 从我个人看来，这本原则不仅是讲述了生活和工作中的一些处理事情的方法，更是建立一种以合作共赢为基础的系统性的观点，观点讲究以人为核心，追求头脑开放，心态平和，尊重客观现实等特质，去完善作为人的个体，将自己的长期发展看作是一个可管理的系统，坦率面对自己，承认自己的不足，有效地建立起与自己心智的沟通体系，为自己的发展制定计划，并长期坚持，最终完善自我，达到自我成功的境界。 真的非常推荐这本书，无论你在从事什么工作，我都推荐你读一读。 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "},"ideas/":{"url":"ideas/","title":"抛砖引玉","keywords":"","body":"抛砖引玉 记录一些胡思乱想，留待以后回首前尘 Copyright © happyirick 2022 all right reservedPost time: 2022-03-29 15:39:34 "}}